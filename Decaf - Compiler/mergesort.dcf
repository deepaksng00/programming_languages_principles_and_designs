// merge sort in Decaf!!!
class Program {
    int array[10],temp[10];
    
    void mergesort(int ptr, int len) {
        int ptr1,ptr2,len1,len2,i,a,b;

        if (len == 1) {
            return;
        }

        ptr1 = ptr;
        len1 = len / 2;
        ptr2 = ptr1 + len1;
        len2 = len - len1;
        
        mergesort(ptr1, len1);
        mergesort(ptr2, len2);

        a = 0;
        b = 0;
        for i = 0, len {
            if (a < len1 && b < len2) {
                if (array[ptr1 + a] < array[ptr2 + b]) {
                    temp[ptr1 + i] = array[ptr1 + a];
                    a += 1;
                } else {
                    temp[ptr1 + i] = array[ptr2 + b];
                    b += 1;
                }
            } else {
                if (a >= len1) {
                    temp[ptr1 + i] = array[ptr2 + b];
                    b += 1;
                } else {
                    temp[ptr1 + i] = array[ptr1 + a];
                    a += 1;
                }
            }
        }

        for i = 0, len {
            array[ptr1 + i] = temp[ptr1 + i];
        }
    }

    int main() {
        int i;
        
        //set the random seet, using time
        callout("srandom",callout("time",0));

        callout("printf","before merge sort...\n");
        for i = 0, 10 {
            array[i] = callout("random") / (2147483647 / 10);
            callout("printf","%d",array[i]);
            if (i < 10 - 1) {
                callout("printf",",");
            } else {
                callout("printf","\n");
            }
        }

        mergesort(0, 10);

        callout("printf","after merge sort...\n");
        for i = 0, 10 {
            callout("printf","%d",array[i]);
            if (i < 10 - 1) {
                callout("printf",",");
            } else {
                callout("printf","\n");
            }
        }

        return 0;
    }
}
